"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _nock = _interopRequireDefault(require("nock"));

var _gitlab = _interopRequireDefault(require("../gitlab"));

var getUserInfo = _gitlab.default.getUserInfo;

function rejects() {
  return _rejects.apply(this, arguments);
}

function _rejects() {
  _rejects = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee9(promise) {
    var error;
    return _regenerator.default.wrap(function (_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return promise.catch(function (e) {
              return e;
            });

          case 2:
            error = _context9.sent;
            expect(error).toBeTruthy();

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));
  return _rejects.apply(this, arguments);
}

test('handle errors',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee() {
  return _regenerator.default.wrap(function (_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          (0, _nock.default)('https://gitlab.com').get('/api/v4/users?username=nodisplayname').reply(200, []);
          _context.next = 3;
          return rejects(getUserInfo('nodisplayname'));

        case 3:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
})));
test('fill in the name when it is returned',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee2() {
  var info;
  return _regenerator.default.wrap(function (_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          (0, _nock.default)('https://gitlab.com').get('/api/v4/users?username=nodisplayname').reply(200, [{
            username: 'nodisplayname',
            name: 'No Display Name',
            avatar_url: 'http://www.gravatar.com/avatar/3186450a99d1641bf75a44baa23f0826?s=80\u0026d=identicon',
            web_url: 'https://gitlab.com/nodisplayname'
          }]);
          _context2.next = 3;
          return getUserInfo('nodisplayname');

        case 3:
          info = _context2.sent;
          expect(info.name).toBe('No Display Name');

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this);
})));
test('fill in the name when null is returned',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee3() {
  var info;
  return _regenerator.default.wrap(function (_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          (0, _nock.default)('https://gitlab.com').get('/api/v4/users?username=nodisplayname').reply(200, [{
            username: 'nodisplayname',
            name: null,
            avatar_url: 'http://www.gravatar.com/avatar/3186450a99d1641bf75a44baa23f0826?s=80\u0026d=identicon',
            web_url: 'https://gitlab.com/nodisplayname'
          }]);
          _context3.next = 3;
          return getUserInfo('nodisplayname');

        case 3:
          info = _context3.sent;
          expect(info.name).toBe('nodisplayname');

        case 5:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
})));
test('fill in the name when an empty string is returned',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee4() {
  var info;
  return _regenerator.default.wrap(function (_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          (0, _nock.default)('https://gitlab.com').get('/api/v4/users?username=nodisplayname').reply(200, [{
            username: 'nodisplayname',
            name: '',
            avatar_url: 'http://www.gravatar.com/avatar/3186450a99d1641bf75a44baa23f0826?s=80\u0026d=identicon',
            web_url: 'https://gitlab.com/nodisplayname'
          }]);
          _context4.next = 3;
          return getUserInfo('nodisplayname');

        case 3:
          info = _context4.sent;
          expect(info.name).toBe('nodisplayname');

        case 5:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4, this);
})));
test('append http when no absolute link is provided',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee5() {
  var info;
  return _regenerator.default.wrap(function (_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          (0, _nock.default)('https://gitlab.com').get('/api/v4/users?username=nodisplayname').reply(200, [{
            username: 'nodisplayname',
            name: 'No Display Name',
            avatar_url: 'http://www.gravatar.com/avatar/3186450a99d1641bf75a44baa23f0826?s=80\u0026d=identicon',
            web_url: 'www.gitlab.com/nodisplayname'
          }]);
          _context5.next = 3;
          return getUserInfo('nodisplayname');

        case 3:
          info = _context5.sent;
          expect(info.profile).toBe('http://www.gitlab.com/nodisplayname');

        case 5:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee5, this);
})));
test('retrieve user from a different gitlab registry',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee6() {
  var info;
  return _regenerator.default.wrap(function (_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          (0, _nock.default)('http://gitlab.myhost.com:3000').get('/api/v4/users?username=nodisplayname').reply(200, [{
            username: 'nodisplayname',
            name: 'No Display Name',
            avatar_url: 'http://www.gravatar.com/avatar/3186450a99d1641bf75a44baa23f0826?s=80\u0026d=identicon',
            web_url: 'https://gitlab.com/nodisplayname'
          }]);
          _context6.next = 3;
          return getUserInfo('nodisplayname', 'http://gitlab.myhost.com:3000');

        case 3:
          info = _context6.sent;
          expect(info.name).toBe('No Display Name');

        case 5:
        case "end":
          return _context6.stop();
      }
    }
  }, _callee6, this);
})));
test('retrieve user from a gitlab registry that needs a token',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee7() {
  var info;
  return _regenerator.default.wrap(function (_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          (0, _nock.default)('http://gitlab.needtoken.com:3000').get('/api/v4/users?username=nodisplayname&private_token=faketoken').reply(200, [{
            username: 'nodisplayname',
            name: 'No Display Name',
            avatar_url: 'http://www.gravatar.com/avatar/3186450a99d1641bf75a44baa23f0826?s=80\u0026d=identicon',
            web_url: 'https://gitlab.com/nodisplayname'
          }]);
          _context7.next = 3;
          return getUserInfo('nodisplayname', 'http://gitlab.needtoken.com:3000', 'faketoken');

        case 3:
          info = _context7.sent;
          expect(info.name).toBe('No Display Name');

        case 5:
        case "end":
          return _context7.stop();
      }
    }
  }, _callee7, this);
})));
test('handle error when no token is offered',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee8() {
  return _regenerator.default.wrap(function (_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          (0, _nock.default)('http://gitlab.needtoken.com:3000').get('/api/v4/users?username=nodisplayname').reply(200, []);
          _context8.next = 3;
          return rejects(getUserInfo('nodisplayname', 'http://gitlab.needtoken.com:3000', ''));

        case 3:
        case "end":
          return _context8.stop();
      }
    }
  }, _callee8, this);
})));