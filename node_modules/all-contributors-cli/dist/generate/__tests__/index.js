"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _ = _interopRequireDefault(require("../"));

var _contributors = _interopRequireDefault(require("./fixtures/contributors.json"));

function fixtures() {
  var content = ['# project', '', 'Description', '', '## Contributors', 'These people contributed to the project:', '<!-- ALL-CONTRIBUTORS-LIST:START -->FOO BAR BAZ<!-- ALL-CONTRIBUTORS-LIST:END -->', '', 'Thanks a lot everyone!'].join('\n');
  return {
    options: {
      projectOwner: 'kentcdodds',
      projectName: 'all-contributors',
      imageSize: 100,
      contributorsPerLine: 5,
      contributors: _contributors.default,
      contributorTemplate: '<%= contributor.name %> is awesome!'
    },
    jfmengels: {
      login: 'jfmengels',
      name: 'Jeroen Engels',
      html_url: 'https://github.com/jfmengels',
      avatar_url: 'https://avatars.githubusercontent.com/u/3869412?v=3',
      contributions: ['doc']
    },
    content
  };
}

test('replace the content between the ALL-CONTRIBUTORS-LIST tags by a table of contributors', function () {
  var kentcdodds = _contributors.default.kentcdodds,
      bogas04 = _contributors.default.bogas04;

  var _fixtures = fixtures(),
      options = _fixtures.options,
      jfmengels = _fixtures.jfmengels,
      content = _fixtures.content;

  var result = (0, _.default)(options, [kentcdodds, bogas04, jfmengels], content);
  expect(result).toMatchSnapshot();
});
test('split contributors into multiples lines when there are too many', function () {
  var kentcdodds = _contributors.default.kentcdodds;

  var _fixtures2 = fixtures(),
      options = _fixtures2.options,
      content = _fixtures2.content;

  var result = (0, _.default)(options, [kentcdodds, kentcdodds, kentcdodds, kentcdodds, kentcdodds, kentcdodds, kentcdodds], content);
  expect(result).toMatchSnapshot();
});
test('not inject anything if there is no tags to inject content in', function () {
  var kentcdodds = _contributors.default.kentcdodds;

  var _fixtures3 = fixtures(),
      options = _fixtures3.options;

  var content = ['# project', '', 'Description', '', 'License: MIT'].join('\n');
  var result = (0, _.default)(options, [kentcdodds], content);
  expect(result).toBe(content);
});
test('not inject anything if start tag is malformed', function () {
  var kentcdodds = _contributors.default.kentcdodds;

  var _fixtures4 = fixtures(),
      options = _fixtures4.options;

  var content = ['# project', '', 'Description', '<!-- ALL-CONTRIBUTORS-LIST:SSSSSSSTART -->', '<!-- ALL-CONTRIBUTORS-LIST:END -->', '', 'License: MIT'].join('\n');
  var result = (0, _.default)(options, [kentcdodds], content);
  expect(result).toBe(content);
});
test('not inject anything if end tag is malformed', function () {
  var kentcdodds = _contributors.default.kentcdodds;

  var _fixtures5 = fixtures(),
      options = _fixtures5.options;

  var content = ['# project', '', 'Description', '<!-- ALL-CONTRIBUTORS-LIST:START -->', '<!-- ALL-CONTRIBUTORS-LIST:EEEEEEEND -->', '', 'License: MIT'].join('\n');
  var result = (0, _.default)(options, [kentcdodds], content);
  expect(result).toBe(content);
});
test('inject nothing if there are no contributors', function () {
  var _fixtures6 = fixtures(),
      options = _fixtures6.options,
      content = _fixtures6.content;

  var expected = ['# project', '', 'Description', '', '## Contributors', 'These people contributed to the project:', '<!-- ALL-CONTRIBUTORS-LIST:START -->', '<!-- prettier-ignore -->', '<!-- ALL-CONTRIBUTORS-LIST:END -->', '', 'Thanks a lot everyone!'].join('\n');
  var result = (0, _.default)(options, [], content);
  expect(result).toBe(expected);
});
test('replace all-contributors badge if present', function () {
  var kentcdodds = _contributors.default.kentcdodds;

  var _fixtures7 = fixtures(),
      options = _fixtures7.options;

  var content = ['# project', '', 'Badges', ['[![version](https://img.shields.io/npm/v/all-contributors-cli.svg?style=flat-square)](http://npm.im/all-contributors-cli)', '[![All Contributors](https://img.shields.io/badge/all_contributors-0-orange.svg?style=flat-square)](#contributors)', '[![version](https://img.shields.io/npm/v/all-contributors-cli.svg?style=flat-square)](http://npm.im/all-contributors-cli)'].join(''), '', 'License: MIT'].join('\n');
  var expected = ['# project', '', 'Badges', ['[![version](https://img.shields.io/npm/v/all-contributors-cli.svg?style=flat-square)](http://npm.im/all-contributors-cli)', '[![All Contributors](https://img.shields.io/badge/all_contributors-1-orange.svg?style=flat-square)](#contributors)', '[![version](https://img.shields.io/npm/v/all-contributors-cli.svg?style=flat-square)](http://npm.im/all-contributors-cli)'].join(''), '', 'License: MIT'].join('\n');
  var result = (0, _.default)(options, [kentcdodds], content);
  expect(result).toBe(expected);
});