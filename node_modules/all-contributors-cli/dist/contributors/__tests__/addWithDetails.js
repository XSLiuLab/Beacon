"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _addWithDetails = _interopRequireDefault(require("../addWithDetails"));

var _fixtures2 = _interopRequireDefault(require("./fixtures"));

test('add new contributor without going to the network',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee() {
  var _fixtures, options, userDetails, contributors;

  return _regenerator.default.wrap(function (_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _fixtures = (0, _fixtures2.default)(), options = _fixtures.options;
          userDetails = {
            login: 'jakebolam',
            contributions: ['code', 'security'],
            name: 'Jake Bolam',
            avatar_url: 'my-avatar.example.com',
            profile: 'jakebolam.com'
          };
          _context.next = 4;
          return (0, _addWithDetails.default)({
            options,
            login: userDetails.login,
            contributions: userDetails.contributions,
            name: userDetails.name,
            avatar_url: userDetails.avatar_url,
            profile: userDetails.profile
          });

        case 4:
          contributors = _context.sent;
          expect(contributors).toHaveLength(options.contributors.length + 1);
          expect(contributors[options.contributors.length]).toEqual(userDetails);

        case 7:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
})));