"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _add = _interopRequireDefault(require("../add"));

var _fixtures8 = _interopRequireDefault(require("./fixtures"));

function mockInfoFetcher(username) {
  return Promise.resolve({
    login: username,
    name: 'Some name',
    avatar_url: 'www.avatar.url',
    profile: 'www.profile.url'
  });
}

function caseFixtures() {
  return {
    options: {
      contributors: [{
        login: 'Login1',
        name: 'Some name',
        avatar_url: 'www.avatar.url',
        profile: 'www.profile.url',
        contributions: ['code']
      }]
    }
  };
}

test('callback with error if infoFetcher fails',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee() {
  var _fixtures, options, username, contributions, error, infoFetcher, resolvedError;

  return _regenerator.default.wrap(function (_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          infoFetcher = function () {
            return Promise.reject(error);
          };

          _fixtures = (0, _fixtures8.default)(), options = _fixtures.options;
          username = 'login3';
          contributions = ['doc'];
          error = new Error('infoFetcher error');
          _context.next = 7;
          return (0, _add.default)(options, username, contributions, infoFetcher).catch(function (e) {
            return e;
          });

        case 7:
          resolvedError = _context.sent;
          expect(resolvedError).toBe(error);

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
})));
test('add new contributor at the end of the list of contributors', function () {
  var _fixtures2 = (0, _fixtures8.default)(),
      options = _fixtures2.options;

  return (0, _add.default)(options, 'login3', ['doc'], mockInfoFetcher).then(function (contributors) {
    expect(contributors).toHaveLength(options.contributors.length + 1);
    expect(contributors[options.contributors.length]).toEqual({
      login: 'login3',
      name: 'Some name',
      avatar_url: 'www.avatar.url',
      profile: 'www.profile.url',
      contributions: ['doc']
    });
  });
});
test('add new contributor at the end of the list of contributors with a url link', function () {
  var _fixtures3 = (0, _fixtures8.default)(),
      options = _fixtures3.options;

  options.url = 'www.foo.bar';
  return (0, _add.default)(options, 'login3', ['doc'], mockInfoFetcher).then(function (contributors) {
    expect(contributors).toHaveLength(options.contributors.length + 1);
    expect(contributors[options.contributors.length]).toEqual({
      login: 'login3',
      name: 'Some name',
      avatar_url: 'www.avatar.url',
      profile: 'www.profile.url',
      contributions: [{
        type: 'doc',
        url: 'www.foo.bar'
      }]
    });
  });
});
test(`should not update an existing contributor's contributions where nothing has changed`, function () {
  var _fixtures4 = (0, _fixtures8.default)(),
      options = _fixtures4.options;

  return (0, _add.default)(options, 'login2', ['blog', 'code'], mockInfoFetcher).then(function (contributors) {
    expect(contributors).toEqual(options.contributors);
  });
});
test(`should not update an existing contributor's contributions where nothing has changed but the casing`, function () {
  var _caseFixtures = caseFixtures(),
      options = _caseFixtures.options;

  return (0, _add.default)(options, 'login1', ['code'], mockInfoFetcher).then(function (contributors) {
    expect(contributors).toEqual(options.contributors);
  });
});
test(`should update an existing contributor's contributions if a new type is added`, function () {
  var _fixtures5 = (0, _fixtures8.default)(),
      options = _fixtures5.options;

  return (0, _add.default)(options, 'login1', ['bug'], mockInfoFetcher).then(function (contributors) {
    expect(contributors).toHaveLength(options.contributors.length);
    expect(contributors[0]).toEqual({
      login: 'login1',
      name: 'Some name',
      avatar_url: 'www.avatar.url',
      profile: 'www.profile.url',
      contributions: ['code', 'bug']
    });
  });
});
test(`should update an existing contributor's contributions if a new type is added with different username case`, function () {
  var _caseFixtures2 = caseFixtures(),
      options = _caseFixtures2.options;

  return (0, _add.default)(options, 'login1', ['bug'], mockInfoFetcher).then(function (contributors) {
    expect(contributors).toHaveLength(1);
    expect(contributors[0]).toEqual({
      login: 'Login1',
      name: 'Some name',
      avatar_url: 'www.avatar.url',
      profile: 'www.profile.url',
      contributions: ['code', 'bug']
    });
  });
});
test(`should update an existing contributor's contributions if a new type is added with a link`, function () {
  var _fixtures6 = (0, _fixtures8.default)(),
      options = _fixtures6.options;

  options.url = 'www.foo.bar';
  return (0, _add.default)(options, 'login1', ['bug'], mockInfoFetcher).then(function (contributors) {
    expect(contributors).toHaveLength(options.contributors.length);
    expect(contributors[0]).toEqual({
      login: 'login1',
      name: 'Some name',
      avatar_url: 'www.avatar.url',
      profile: 'www.profile.url',
      contributions: ['code', {
        type: 'bug',
        url: 'www.foo.bar'
      }]
    });
  });
});
test(`should update an existing contributor's contributions if an existing type is removed`, function () {
  var _fixtures7 = (0, _fixtures8.default)(),
      options = _fixtures7.options;

  return (0, _add.default)(options, 'login2', ['code'], mockInfoFetcher).then(function (contributors) {
    expect(contributors).toHaveLength(options.contributors.length);
    expect(contributors[1]).toEqual({
      login: 'login2',
      name: 'Some name',
      avatar_url: 'www.avatar.url',
      profile: 'www.profile.url',
      contributions: ['code']
    });
  });
});