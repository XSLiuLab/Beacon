"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _prompt = _interopRequireDefault(require("../prompt"));

function fixtures() {
  return {
    contributors: [{
      login: 'jfmengels',
      name: 'Jeroen Engels',
      avatar_url: 'https://avatars.githubusercontent.com/u/3869412?v=3',
      profile: 'https://github.com/jfmengels',
      contributions: []
    }, {
      login: 'kentcdodds',
      name: 'Kent C. Dodds',
      avatar_url: 'https://avatars.githubusercontent.com/u/1500684?v=3',
      profile: 'http://kentcdodds.com/',
      contributions: []
    }, {
      login: 'jccguimaraes',
      name: 'João Guimarães',
      avatar_url: 'https://avatars.githubusercontent.com/u/14871650?v=3',
      profile: 'https://github.com/jccguimaraes',
      contributions: []
    }]
  };
}

test(`should throw error if all contribution types are invalid`, function () {
  var options = fixtures();
  expect(function () {
    return (0, _prompt.default)(options, 'userName', 'invalidContributionType1,invalidContributionType2');
  }).toThrow('invalidContributionType1,invalidContributionType2 is/are invalid contribution type(s)');
});
test(`should not throw error if atleast one of the contribution types is valid`, function () {
  var options = fixtures();
  return (0, _prompt.default)(options, 'userName', 'wrongContributionType,code').then(function (answers) {
    expect(answers).toEqual({
      username: 'userName',
      contributions: ['code']
    });
  });
});
test(`should filter valid contribution types from user inserted types`, function () {
  var options = fixtures();
  return (0, _prompt.default)(options, 'userName', 'invalidContributionType1,code,invalidContributionType2,bug').then(function (answers) {
    expect(answers.contributions).toHaveLength(2);
    expect(answers.contributions).toEqual(['code', 'bug']);
  });
});