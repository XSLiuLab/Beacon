"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _configFile = _interopRequireDefault(require("../config-file"));

var absentFile = './abc';
var absentConfileFileExpected = `Configuration file not found: ${absentFile}`;
var incompleteConfigFilePath = './.all-contributorsrc';
var NoOwnerConfigFile = {
  projectOwner: '',
  projectName: 'all-contributors-cli',
  imageSize: 100,
  commit: false,
  contributorsPerLine: 6,
  contributors: []
};
var NoNameConfigFile = {
  projectOwner: 'all-contributors',
  projectName: '',
  imageSize: 100,
  commit: false,
  contributorsPerLine: 6,
  contributors: []
};
var NoFilesConfigFile = {
  projectOwner: 'all-contributors',
  projectName: 'all-contributors-cli',
  imageSize: 100,
  commit: false,
  contributorsPerLine: 6,
  contributors: [],
  files: []
};
test('Reading an absent configuration file throws a helpful error', function () {
  expect(function () {
    return _configFile.default.readConfig(absentFile);
  }).toThrowError(absentConfileFileExpected);
});
test('Writing contributors in an absent configuration file throws a helpful error',
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee() {
  var resolvedError;
  return _regenerator.default.wrap(function (_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _configFile.default.writeContributors(absentFile, []).catch(function (e) {
            return e;
          });

        case 2:
          resolvedError = _context.sent;
          expect(resolvedError.message).toBe(absentConfileFileExpected);

        case 4:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
})));
test('Should throw error and not allow editing config file if project name or owner is not set', function () {
  expect(function () {
    return _configFile.default.writeConfig(incompleteConfigFilePath, NoOwnerConfigFile);
  }).toThrow(`Error! Project owner is not set in ${incompleteConfigFilePath}`);
  expect(function () {
    return _configFile.default.writeConfig(incompleteConfigFilePath, NoNameConfigFile);
  }).toThrow(`Error! Project name is not set in ${incompleteConfigFilePath}`);
});
test(`throws if 'files' was overridden in .all-contributorsrc and is empty`, function () {
  expect(function () {
    return _configFile.default.writeConfig(incompleteConfigFilePath, NoFilesConfigFile);
  }).toThrow(`Error! Project files was overridden and is empty in ${incompleteConfigFilePath}`);
});